#Airport Stimulation
#simulate a simplified airport security system at a busy airport. 
#Passengers arrive according to a Poisson distribution with λ1 = 5 per minute (i.e., mean interarrival rate μ1 = 0.2 minutes) to the ID/boarding-pass check queue, where there are several servers who each have exponential service time with mean rate μ2 = 0.75 minutes. 

"""
Created on Wed Jun 27 20:57:55 2018

@author: Lee_Y
"""

import simpy
import random 
import numpy as np

arrival_rate = 5
checkins = []
waits_checkin = []
security = []
waits_security = []

class Airport(object):
    def __init__(self, env, serve_rate, nscanners, desks):
        self.env = env # initialize the environment 
        # initialize desk with "desks" capacity
        self.desk = simpy.Resource(env, desks)
        self.serve_rate = 1/serve_rate # initialize the service_rate
        # initialize "nscanners" number of scanners and store in a list
        self.scanners = [simpy.Resource(env, 1) for n in range(nscanners)] 
    
    
    # make a check_in function for getting the time spent checking in
    def check_in(self):
        # generate random number for how long it takes to check in
        checkin_time = random.expovariate(self.serve_rate)
        checkins.append(checkin_time) # add to list
        yield self.env.timeout(checkin_time)
        
    # make a security_function for getting the time spent in security
    def security(self):
        # generate random number for how long security takes
        security_time = random.uniform(0.5, 1) 
        security.append(security_time) # add to list
        yield self.env.timeout(security_time)

def passenger(env, airport):
    # get time for when passenger enters check-in line
    start_checkin_wait = env.now 
    
    # request a check-in desk
    with airport.desk.request() as req:
        yield req
        # calculate time spent waiting to check-in
        wait_checkin = env.now - start_checkin_wait
        waits_checkin.append(wait_checkin)
        
        # do the check-in process 
        yield env.process(airport.check_in())
        
    # get time for when passenger enters security line
    start_security_wait = env.now
    lines = [] # make an empty list for the security lines
    i = 0 # index number
    
    # loop through the list of security scanners
    for scanner in airport.scanners:
        # make a list of how long each line is 
        lines.append((len(airport.scanners[i].queue) + 
                    len(airport.scanners[i].users)))
        i += 1 # increment the index
    
    # loop through the list of line lenghts
    for line in lines:
        # find the minimum length line
        if line == 0 | line == min(lines):
            choice = lines.index(line) # choose that line
    
    # get in the shortest line
    with airport.scanners[choice].request() as req:
        yield req
        # calculate time spent waiting in security line
        wait_security = env.now - start_security_wait
        waits_security.append(wait_security) # add to list
        
        # do the security process
        yield env.process(airport.security())



def setup(env, arrival_rate, serve_rate, nscanners, desks):
    # create the airport
    airport = Airport(env, serve_rate, nscanners, desks) 
    
    # generate passengers randomly until sim is over
    while True:
        # randomly generate next arrival time
        arrival = random.expovariate(arrival_rate)
        yield env.timeout(arrival)
        env.process(passenger(env, airport))
    return(airport)
    
tots = []

for i in range(100):
    checkins = []
    waits_checkin = []
    security = []
    waits_security = []
    
    env = simpy.Environment()
    env.process(setup(env, arrival_rate, 0.75, 4, 4))
    env.run(until=200)
    
    times = [waits_checkin, checkins, waits_security, security]
    min_l = min([len(l) for l in times]) # find the minimum length
    
    a = np.resize(np.array(waits_checkin), min_l)
    x = np.resize(np.array(checkins), min_l)
    y = np.resize(np.array(waits_security), min_l)
    z = np.resize(np.array(security), min_l)
    
    tot = a + x + y + z
    avg = np.mean(tot)
    tots.append(avg)
    avg_a = np.mean(a)
    avg_y = np.mean(y)
    
